name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]

env:
  BUILD_TYPE: Release

jobs:
  # Build and test on multiple platforms
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libpam0g-dev \
          liblua5.3-dev \
          lua5.3 \
          pkg-config \
          cmake \
          clang \
          polkitd \
          libpolkit-agent-1-dev \
          libpolkit-gobject-1-dev \
          libglib2.0-dev

    - name: Build project
      run: |
        echo "Building Voix..."
        cd src
        if [ -f "CMakeLists.txt" ]; then
            mkdir -p build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
            make -j$(nproc)
            cd ..
        else
            echo "CMakeLists.txt not found, trying direct compilation..."
            clang++ -std=c++17 -o voix main.cpp config.cpp utils.cpp auth.cpp polkit.cpp logging.cpp password.cpp lua_config.cpp env.cpp -I include -llua5.3 -lpam
        fi

    - name: Run tests
      run: |
        cd src/build
        ./voix check ../voix.conf.sample

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: voix-${{ matrix.os }}-clang
        path: src/build/

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run security checks
      run: |
        # Basic static analysis
        find src -name "*.cpp" -o -name "*.hpp" | xargs -I {} sh -c 'echo "Checking {}"; grep -n "strcpy\|strcat\|sprintf" {} || true'

        # Check for setuid usage
        grep -r "setuid\|seteuid" src/ || echo "No setuid calls found"

  # Release job
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, security]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/voix-*/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
